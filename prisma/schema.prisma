generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int         @id @default(autoincrement())
  company            String      @db.VarChar(100)
  CNPJ               String      @db.VarChar(100)
  email              String      @unique @db.VarChar(128)
  provider           String?     @db.VarChar(64)
  password           String      @db.VarChar(255)
  resetPasswordToken String?     @db.VarChar(255)
  confirmationCode   String?     @db.VarChar(6)
  confirmed          Boolean     @default(false)
  blocked            Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isAdmin            Boolean     @default(true)
  users              User[]
}

// Schema Blog
model User {
  id                 Int       @id @default(autoincrement())
  firstName          String    @db.VarChar(64)
  lastName           String    @db.VarChar(64)
  username           String    @db.VarChar(64)
  email              String    @unique @db.VarChar(128)
  provider           String?   @db.VarChar(64)
  password           String    @db.VarChar(255)
  resetPasswordToken String?   @db.VarChar(255)
  confirmationCode   String?   @db.VarChar(6)
  confirmed          Boolean   @default(false)
  blocked            Boolean   @default(false)
  jobTitle           String?   @db.VarChar(64)
  profile            Profile?
  accountId          Int
  account            Account   @relation(fields: [accountId], references: [id], onDelete: Cascade)
  inGroup            InGroup[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Profile {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  avatarUrl   String?      @db.VarChar(255)
  imgUrl      String?      @db.VarChar(255)
  biograpy    String?      @db.Text
  slug        String       @unique @db.VarChar(255)
  published   Boolean      @default(true)
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  posts       Post[]
  socialMedia SocialMedia?
}

model SocialMedia {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(64)
  acessLink String  @db.VarChar(255)
  profileId Int     @unique
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id           Int         @id @default(autoincrement())
  title        String      @db.VarChar(255)
  description  String?     @db.VarChar(255)
  content      String      @db.Text
  imgUrl       String      @db.VarChar(255)
  slug         String      @unique @db.VarChar(255)
  published    Boolean     @default(false)
  afterPost    String?     @db.VarChar(255)
  beforePost   String?     @db.VarChar(255)
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  profileId    Int
  profile      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  categories   Category[]
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?  @db.VarChar(270)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]
}

model Collection {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  imgUrl    String   @db.VarChar(255)
  author    String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

// Service General Hooks
model Webhook {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  headers   Json?    @db.Json
  events    Json?    @db.Json
  enabled   Boolean  @default(false)
  createdAt DateTime @db.Timestamp()
  updatedAt DateTime @updatedAt
}

// Service Busines
model Group {
  id                  Int            @id @default(autoincrement())
  customerInvoiceData String         @db.Text
  groupTypeId         Int
  groupType           GroupType      @relation(fields: [groupTypeId], references: [id], onDelete: Cascade)
  createdAt           DateTime       @db.Timestamp()
  updatedAt           DateTime       @updatedAt
  Subscription        Subscription[]
  InGroup             InGroup[]
}

model InGroup {
  id          Int       @id @default(autoincrement())
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupTypeId Int
  groupType   GroupType @relation(fields: [groupTypeId], references: [id], onDelete: Cascade)
  updatedAt   DateTime  @updatedAt()
}

model GroupType {
  id             Int                 @id @default(autoincrement())
  name           String              @db.VarChar(64)
  membersMin     Int                 @db.SmallInt
  membersMax     Int
  group          Group[]
  InGroup        InGroup[]
  software       Software[]
  plan           Plan[]
  sale           Sale[]
  productSale    ProductSale?
  serviceSale    ServiceSale?
  oneServiceSale OneTimeServiceSale?
}

model Software {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(255)
  details   String      @db.Text
  acessLink String      @db.VarChar(255)
  plan      Plan[]
  groupType GroupType[]
}

model Plan {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  currentPrice   Decimal          @db.Decimal()
  softwareId     Int
  software       Software         @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  groupTypeId    Int
  groupType      GroupType        @relation(fields: [groupTypeId], references: [id], onDelete: Cascade)
  optionIncluded OptionIncluded[]
  include        Include[]
  prerequisite   Prerequisite[]
  createdAt      DateTime         @default(now())
  active         Boolean          @default(false)
  planHistory    PlanHistory[]
  subscription   Subscription[]
}

model Option {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  optionIncluded OptionIncluded[]
}

model OptionIncluded {
  id         Int      @id @default(autoincrement())
  planId     Int
  plan       Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  optionId   Int
  option     Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  dateAdd    DateTime @db.Date
  dateRemove DateTime @db.Date
}

model Include {
  id      Int   @id @default(autoincrement())
  offerId Int
  offer   Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  planId  Int
  plan    Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Offer {
  id                 Int            @id @default(autoincrement())
  name               String         @db.VarChar(255)
  startDate          DateTime       @db.Date
  endDate            DateTime       @db.Date
  description        String         @db.Text
  discountAmount     Decimal        @db.Decimal()
  discountPercentage Decimal        @db.Decimal()
  durationMonths     Int
  durationEndDate    DateTime       @db.Date
  include            Include[]
  prerequisite       Prerequisite[]
}

model Prerequisite {
  id      Int   @id @default(autoincrement())
  offerId Int
  offer   Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  planId  Int
  plan    Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Invoice {
  id             Int          @id @default(autoincrement())
  customerData   String       @db.Text
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  planHistoryId  Int
  planHistory    PlanHistory  @relation(fields: [planHistoryId], references: [id], onDelete: Cascade)
  startDate      DateTime     @db.Date
  endDate        DateTime     @db.Date
  description    String       @db.VarChar(255)
  amount         Decimal      @db.Decimal()
  createdAt      DateTime     @db.Timestamp()
  due            DateTime     @db.Timestamp()
  paid           DateTime     @db.Timestamp()
}

model PlanHistory {
  id             Int          @id @default(autoincrement())
  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  planId         Int
  plan           Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  startDate      DateTime     @db.Date
  endDate        DateTime     @db.Date
  createdAt      DateTime     @db.Timestamp()
  invoice        Invoice[]
}

model Subscription {
  id               Int           @id @default(autoincrement())
  groupId          Int
  group            Group         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  startDate        DateTime      @db.Date
  endDate          DateTime      @db.Date
  subscribe        Boolean       @default(false)
  planId           Int
  plan             Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  ofterId          Int
  ofterStartDate   DateTime      @db.Date
  ofterEndDate     DateTime      @db.Date
  dateSubscribed   DateTime      @db.Date
  dateUnsubscribed DateTime      @db.Date
  validUntil       DateTime      @db.Date
  createdAt        DateTime      @db.Timestamp()
  updatedAt        DateTime      @updatedAt
  invoice          Invoice[]
  planHistory      PlanHistory[]
}

// Service Product or Service
model Sale {
  id              Int                  @id @default(autoincrement())
  timeCreated     DateTime             @db.Timestamp()
  timePaid        DateTime             @db.Timestamp()
  amount          Decimal              @db.Decimal()
  amountPaid      Decimal              @db.Decimal()
  taxAmount       Decimal              @db.Decimal()
  statusId        Int
  status          SaleStatus           @relation(fields: [statusId], references: [id], onDelete: Cascade)
  userGroupTypeId Int
  userGroupType   GroupType            @relation(fields: [userGroupTypeId], references: [id], onDelete: Cascade)
  productSale     ProductSale[]
  serviceSale     ServiceSale[]
  oneServiceSale  OneTimeServiceSale[]
}

model SaleStatus {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
  sale Sale[]
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  priceUnit     Decimal       @db.Decimal()
  basicUnit     String        @db.VarChar(255)
  taxPercentage Decimal       @db.Decimal()
  limited       Boolean       @default(true)
  active        Boolean       @default(true)
  productSale   ProductSale[]
  stock         Stock?
}

model ProductSale {
  id              Int        @id @default(autoincrement())
  quantitySold    Decimal    @db.Decimal()
  priceUnit       Decimal    @db.Decimal()
  price           Decimal    @db.Decimal()
  taxAmount       Decimal    @db.Decimal()
  limited         Boolean    @default(true)
  active          Boolean    @default(true)
  userGroupTypeId Int        @unique
  userGroupType   GroupType  @relation(fields: [userGroupTypeId], references: [id], onDelete: Cascade)
  saleId          Int
  sale            Sale       @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId       Int
  product         Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  shipment        Shipment[]
}

model Stock {
  id        Int      @id @default(autoincrement())
  inStock   Decimal  @db.Decimal()
  productId Int      @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
}

model Service {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  priceUnit     Decimal       @db.Decimal()
  basicUnit     String        @db.VarChar(255)
  taxPercentage Decimal       @db.Decimal()
  active        Boolean       @default(true)
  period        Int
  serviceSale   ServiceSale[]
}

model ServiceSale {
  id              Int       @id @default(autoincrement())
  quantitySold    Decimal   @db.Decimal()
  priceUnit       Decimal   @db.Decimal()
  price           Decimal   @db.Decimal()
  taxAmount       Decimal   @db.Decimal()
  renove          Boolean   @default(true)
  period          Int
  startTime       DateTime  @db.Timestamp()
  endTime         DateTime? @db.Timestamp()
  userGroupTypeId Int       @unique
  userGroupType   GroupType @relation(fields: [userGroupTypeId], references: [id], onDelete: Cascade)
  saleId          Int
  sale            Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  serviceId       Int
  service         Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

model OneTimeService {
  id            Int                  @id @default(autoincrement())
  name          String               @db.VarChar(255)
  price         Decimal              @db.Decimal()
  taxPercentage Decimal              @db.Decimal()
  active        Boolean              @default(true)
  serviceSale   OneTimeServiceSale[]
}

model OneTimeServiceSale {
  id              Int            @id @default(autoincrement())
  name            String         @db.VarChar(255)
  price           Decimal        @db.Decimal()
  taxAmount       Decimal        @db.Decimal()
  userGroupTypeId Int            @unique
  userGroupType   GroupType      @relation(fields: [userGroupTypeId], references: [id], onDelete: Cascade)
  saleId          Int
  sale            Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  serviceId       Int
  service         OneTimeService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
}

// Client and Locals
model Country {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(64)
  code  Int
  state State[]
}

model State {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(100)
  UF        String  @db.Char(2)
  countryId Int
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade)
  city      City[]
}

model City {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(100)
  zipCode Int      @db.SmallInt
  stateId Int
  state   State    @relation(fields: [stateId], references: [id], onDelete: Cascade)
  client  Client[]
}

model Client {
  id        Int        @id @default(autoincrement())
  firstName String     @db.VarChar(100)
  lastName  String     @db.VarChar(100)
  email     String     @unique @db.VarChar(168)
  whatsApp  Int        @db.SmallInt
  company   String?    @db.VarChar(255)
  VAT_ID    String?    @db.VarChar(60)
  cityId    Int
  city      City       @relation(fields: [cityId], references: [id], onDelete: Cascade)
  address   Address[]
  Shipment  Shipment[]
}

model Address {
  id       Int        @id @default(autoincrement())
  state    String     @db.VarChar(100)
  zipCode  Int
  street   String     @db.VarChar(255)
  number   Int
  district String     @db.VarChar(100)
  clientId Int
  client   Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  shipment Shipment[]
}

// Details from shipments
model Shipment {
  id             Int              @id @default(autoincrement())
  productSaleId  Int
  producSale     ProductSale      @relation(fields: [productSaleId], references: [id], onDelete: Cascade)
  addressId      Int
  address        Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
  paymentTypeId  Int
  paymentType    PaymentType      @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
  clientId       Int
  client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  shipmentTypeId Int
  shipmentType   ShipmentType     @relation(fields: [shipmentTypeId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @db.Timestamp()
  shipmentStatus ShipmentStatus[]
  paymentDetails PaymentDetails[]
}

model ShipmentType {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(64)
  shipment Shipment[]
}

model ShipmentStatus {
  id              Int           @id @default(autoincrement())
  shipmentId      Int
  shipment        Shipment      @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  time            DateTime      @db.Timestamp()
  notes           String        @db.Text
  statusCatalogId Int
  statusCatalog   StatusCatalog @relation(fields: [statusCatalogId], references: [id], onDelete: Cascade)
}

// Status of shipment
model StatusCatalog {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  shipmentStatus ShipmentStatus[]
}

model PaymentType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(64)
  shipment    Shipment[]
  paymentData PaymentData[]
}

model PaymentDetails {
  id            Int         @id @default(autoincrement())
  shipmentId    Int
  shipment      Shipment    @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  paymentDataId Int
  paymentData   PaymentData @relation(fields: [paymentDataId], references: [id], onDelete: Cascade)
  value         String      @db.VarChar(255)
}

model PaymentData {
  id             Int              @id @default(autoincrement())
  dataName       String           @db.VarChar(255)
  dataType       String           @db.VarChar(255)
  paymentTypeId  Int
  paymentType    PaymentType      @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
  paymentDetails PaymentDetails[]
}

enum Role {
  ADMIN
  EDITOR
  BUSINES
}
