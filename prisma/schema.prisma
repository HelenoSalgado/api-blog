generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  firstName          String?   @db.VarChar(64)
  lastName           String?   @db.VarChar(64)
  username           String    @db.VarChar(64)
  email              String    @unique @db.VarChar(128)
  provider           String?   @db.VarChar(64)
  password           String    @db.VarChar(255)
  resetPasswordToken String?   @db.VarChar(255)
  confirmationCode   String?   @db.VarChar(6)
  confirmed          Boolean   @default(false)
  blocked            Boolean   @default(false)
  jobTitle           String?   @db.VarChar(64)
  profile            Profile?
  inGroup            InGroup[]
}

model Profile {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(255)
  avatarUrl String? @db.VarChar(255)
  imgUrl    String? @db.VarChar(255)
  biograpy  String?
  slug      String  @unique @db.VarChar(255)
  published Boolean @default(true)
  posts     Post[]
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id           Int         @id @default(autoincrement())
  title        String      @db.VarChar(255)
  description  String?     @db.VarChar(255)
  content      String      @db.Text
  imgUrl       String      @db.VarChar(255)
  slug         String      @unique @db.VarChar(255)
  published    Boolean     @default(false)
  afterPost    String?     @db.VarChar(255)
  beforePost   String?     @db.VarChar(255)
  categories   Category[]
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  profileId    Int
  profile      Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(255)
  description String?
  published   Boolean @default(false)
  posts       Post[]
}

model Collection {
  id        Int     @id @default(autoincrement())
  title     String  @db.VarChar(255)
  imgUrl    String  @db.VarChar(255)
  author    String  @db.VarChar(255)
  slug      String  @unique @db.VarChar(255)
  posts     Post[]
  published Boolean @default(false)
}

model Webhook {
  id      Int     @id @default(autoincrement())
  name    String  @db.VarChar(255)
  url     String
  headers Json?
  events  Json?
  enabled Boolean @default(false)
}

model UserGroup {
  id                  Int           @id @default(autoincrement())
  customerInvoiceData String        @db.Text
  userGroupTypeId     Int
  userGroupType       UserGroupType @relation(fields: [userGroupTypeId], references: [id], onDelete: Cascade)
  InGroup             InGroup[]
  createdAt           DateTime      @db.Timestamp()
}

model InGroup {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userGroupId Int
  userGroup   UserGroup @relation(fields: [userGroupId], references: [id], onDelete: Cascade)
  updatedAt   DateTime  @updatedAt()
}

model UserGroupType {
  id         Int         @id @default(autoincrement())
  typeName   String      @db.VarChar(128)
  membersMin Int
  membersMax Int
  userGroup  UserGroup[]
  Software   Software[]
  Plan       Plan[]
}

model Software {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(255)
  details       String          @db.Text
  acessLink     String          @db.VarChar(255)
  plan          Plan[]
  userGroupType UserGroupType[]
}

model Plan {
  id              Int              @id @default(autoincrement())
  name            String           @db.VarChar(255)
  currentPrice    Decimal          @db.Decimal()
  softwareId      Int
  software        Software         @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  userGroupTypeId Int
  userGroupType   UserGroupType    @relation(fields: [userGroupTypeId], references: [id], onDelete: Cascade)
  optionIncluded  OptionIncluded[]
  include         Include[]
  prerequisite    Prerequisite[]
  createdAt       DateTime         @db.Timestamp()
  isActive        Boolean          @default(false)
}

model Option {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  optionIncluded OptionIncluded[]
}

model OptionIncluded {
  id         Int      @id @default(autoincrement())
  planId     Int
  plan       Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  optionId   Int
  option     Option   @relation(fields: [optionId], references: [id], onDelete: Cascade)
  dateAdd    DateTime @db.Date
  dateRemove DateTime @db.Date
}

model Include {
  id      Int   @id @default(autoincrement())
  offerId Int
  offer   Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  planId  Int
  plan    Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)
}

model Offer {
  id                 Int      @id @default(autoincrement())
  name               String   @db.VarChar(255)
  startDate          DateTime @db.Date
  endDate            DateTime @db.Date
  description        String   @db.Text
  discountAmount     Decimal  @db.Decimal()
  discountPercentage Decimal  @db.Decimal()
  durationMonths     Int
  durationEndDate    DateTime @db.Date
  include            Include[]
  prerequisite       Prerequisite[]
}

model Prerequisite{
  id                 Int      @id @default(autoincrement())
  offerId Int
  offer   Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
  planId  Int
  plan    Plan  @relation(fields: [planId], references: [id], onDelete: Cascade)
}
