generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int             @id @default(autoincrement())
  email              String          @unique @db.VarChar(128)
  provider           String?         @db.VarChar(64)
  password           String          @db.VarChar(255)
  resetPasswordToken String?         @db.VarChar(255)
  confirmationCode   String?         @db.VarChar(6)
  confirmed          Boolean         @default(false)
  blocked            Boolean         @default(false)
  isAdmin            Boolean         @default(true)
  planId             Int             @db.SmallInt
  plan               Plan            @relation(fields: [planId], references: [id], onDelete: Cascade)
  company            Company[]
  users              User[]
  posts              Post[]
  sendNewlatter      sendNewlatter[]
  webhooks           Webhook[]
  client             Client[]
  category           Category[]
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  logo      String   @db.VarChar(255)
  CNPJ      String   @db.VarChar(100)
  accountId Int      @db.SmallInt
  account   Account  @relation(fields: [accountId], references: [id])
  contact   Contact?
}

model Contact {
  id        Int     @id @default(autoincrement())
  whatsApp  String  @db.VarChar(17)
  email     String  @db.VarChar(128)
  tel       String  @db.VarChar(17)
  celular   String  @db.VarChar(17)
  companyId Int     @unique @db.SmallInt
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model sendNewlatter {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(64)
  email     String   @db.VarChar(128)
  accountId Int?     @db.SmallInt
  account   Account? @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Schema Blog
model User {
  id                 Int         @id @default(autoincrement())
  firstName          String      @db.VarChar(64)
  lastName           String      @db.VarChar(64)
  username           String      @db.VarChar(64)
  email              String      @unique @db.VarChar(128)
  provider           String?     @db.VarChar(64)
  password           String      @db.VarChar(255)
  resetPasswordToken String?     @db.VarChar(255)
  confirmationCode   String?     @db.VarChar(6)
  confirmed          Boolean     @default(false)
  blocked            Boolean     @default(false)
  jobTitle           String?     @db.VarChar(64)
  profile            Profile?
  role               Role        @default(USER)
  accountId          Int         @db.SmallInt
  account            Account     @relation(fields: [accountId], references: [id], onDelete: Cascade)
  userGroup          UserGroup[]
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
}

model Profile {
  id          Int          @id @default(autoincrement())
  name        String       @db.VarChar(255)
  avatar      String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  biograpy    String?      @db.Text
  slug        String       @unique @db.VarChar(255)
  published   Boolean      @default(true)
  userId      Int          @unique @db.SmallInt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  posts       Post[]
  socialMedia SocialMedia?
}

model SocialMedia {
  id        Int     @id @default(autoincrement())
  name      String  @db.VarChar(64)
  acessLink String  @db.VarChar(255)
  profileId Int     @unique @db.SmallInt
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Post {
  id            Int            @id @default(autoincrement())
  title         String         @db.VarChar(255)
  description   String?        @db.VarChar(255)
  content       String         @db.Text
  imgUrl        String         @db.VarChar(255)
  slug          String         @unique @db.VarChar(255)
  published     Boolean        @default(false)
  afterPost     String?        @db.VarChar(255)
  beforePost    String?        @db.VarChar(255)
  collectionId  Int?           @db.SmallInt
  collection    Collection?    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  profileId     Int
  profile       Profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)
  accountId     Int?           @db.SmallInt
  account       Account?       @relation(fields: [accountId], references: [id], onDelete: Cascade)
  viewsAndLikes ViewsAndLikes?
  comments      Comment[]
  categories    Category[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Comment {
  id         Int     @id @default(autoincrement())
  name       String  @db.VarChar(64)
  email      String  @db.VarChar(128)
  content    String  @db.Text
  isApproved Boolean @default(false)
  post       Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int
}

model ViewsAndLikes {
  id        Int      @id @default(autoincrement())
  views     Int      @db.Integer
  likes     Int      @db.Integer
  unlikes   Int      @db.Integer
  idPost    Int      @unique @db.SmallInt
  post      Post     @relation(fields: [idPost], references: [id], onDelete: Cascade)
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(255)
  description String?  @db.VarChar(270)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  accountId   Int      @db.SmallInt
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  posts       Post[]
}

model Collection {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  imgUrl    String   @db.VarChar(255)
  author    String   @db.VarChar(255)
  slug      String   @unique @db.VarChar(255)
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
}

// Service General Hooks
model Webhook {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  url       String   @db.VarChar(255)
  headers   Json?    @db.Json
  events    Json?    @db.Json
  enabled   Boolean  @default(false)
  accountId Int      @db.SmallInt
  account   Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Service Busines
model UserGroup {
  id          Int       @id @default(autoincrement())
  description String?   @db.Text
  limitUsers  Int       @db.SmallInt
  planId      Int       @db.SmallInt
  plan        Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  userId      Int?      @db.SmallInt
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupTypeId Int       @db.SmallInt
  groupType   GroupType @relation(fields: [groupTypeId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model GroupType {
  id        Int         @id @default(autoincrement())
  role      Role        @default(USER)
  Store     Store[]
  UserGroup UserGroup[]
}

model Software {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(255)
  details   String @db.Text
  acessLink String @db.VarChar(255)
  plan      Plan[]
}

model Plan {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  currentPrice Decimal        @db.Decimal()
  limitUsers   Int            @db.SmallInt
  softwareId   Int            @db.SmallInt
  software     Software       @relation(fields: [softwareId], references: [id], onDelete: Cascade)
  userGroup    UserGroup[]
  account      Account[]
  planHistory  PlanHistory[]
  subscription Subscription[]
  active       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Store        Store[]
}

model Include {
  id      Int   @id @default(autoincrement())
  offerId Int   @db.SmallInt
  offer   Offer @relation(fields: [offerId], references: [id], onDelete: Cascade)
}

model Offer {
  id                 Int       @id @default(autoincrement())
  name               String    @db.VarChar(255)
  startDate          DateTime  @db.Date
  endDate            DateTime  @db.Date
  description        String    @db.Text
  discountAmount     Decimal   @db.Decimal()
  discountPercentage Decimal   @db.Decimal()
  durationMonths     Int       @db.SmallInt
  durationEndDate    DateTime  @db.Date
  include            Include[]
}

model Invoice {
  id             Int          @id @default(autoincrement())
  customerData   String       @db.Text
  subscriptionId Int          @db.SmallInt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  planHistoryId  Int          @db.SmallInt
  planHistory    PlanHistory  @relation(fields: [planHistoryId], references: [id], onDelete: Cascade)
  startDate      DateTime     @db.Date
  endDate        DateTime     @db.Date
  description    String       @db.VarChar(255)
  amount         Decimal      @db.Decimal()
  due            DateTime     @db.Timestamp()
  paid           DateTime     @db.Timestamp()
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PlanHistory {
  id             Int          @id @default(autoincrement())
  subscriptionId Int          @db.SmallInt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  planId         Int          @db.SmallInt
  plan           Plan         @relation(fields: [planId], references: [id], onDelete: Cascade)
  startDate      DateTime     @db.Date
  endDate        DateTime     @db.Date
  invoice        Invoice[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Subscription {
  id               Int           @id @default(autoincrement())
  startDate        DateTime      @db.Date
  endDate          DateTime      @db.Date
  subscribe        Boolean       @default(false)
  planId           Int           @db.SmallInt
  plan             Plan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  ofterId          Int           @db.SmallInt
  ofterStartDate   DateTime      @db.Date
  ofterEndDate     DateTime      @db.Date
  dateSubscribed   DateTime      @db.Date
  dateUnsubscribed DateTime?     @db.Date
  validUntil       DateTime      @db.Date
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  invoice          Invoice[]
  planHistory      PlanHistory[]
}

// Service Product or Service
model Store {
  id                   Int                 @id @default(autoincrement())
  planId               Int?                @db.SmallInt
  plan                 Plan?               @relation(fields: [planId], references: [id], onDelete: Cascade)
  sale                 Sale[]
  productSale          ProductSale?        @relation(fields: [productSaleId], references: [id])
  serviceSale          ServiceSale?        @relation(fields: [serviceSaleId], references: [id])
  oneServiceSale       OneTimeServiceSale? @relation(fields: [oneTimeServiceSaleId], references: [id])
  productSaleId        Int?
  serviceSaleId        Int?
  oneTimeServiceSaleId Int?
  GroupType            GroupType?          @relation(fields: [groupTypeId], references: [id])
  groupTypeId          Int?
}

model Sale {
  id             Int                  @id @default(autoincrement())
  timeCreated    DateTime             @db.Timestamp()
  timePaid       DateTime             @db.Timestamp()
  amount         Decimal              @db.Decimal()
  amountPaid     Decimal              @db.Decimal()
  taxAmount      Decimal              @db.Decimal()
  statusId       Int                  @db.SmallInt
  status         SaleStatus           @relation(fields: [statusId], references: [id], onDelete: Cascade)
  productSale    ProductSale[]
  serviceSale    ServiceSale[]
  oneServiceSale OneTimeServiceSale[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  Store          Store?               @relation(fields: [storeId], references: [id])
  storeId        Int?
}

model SaleStatus {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  sale      Sale[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  priceUnit     Decimal       @db.Decimal()
  basicUnit     String        @db.VarChar(255)
  taxPercentage Decimal       @db.Decimal()
  limited       Boolean       @default(true)
  active        Boolean       @default(true)
  productSale   ProductSale[]
  stock         Stock?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ProductSale {
  id           Int        @id @default(autoincrement())
  quantitySold Decimal    @db.Decimal()
  priceUnit    Decimal    @db.Decimal()
  price        Decimal    @db.Decimal()
  taxAmount    Decimal    @db.Decimal()
  limited      Boolean    @default(true)
  active       Boolean    @default(true)
  saleId       Int        @db.SmallInt
  sale         Sale       @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId    Int        @db.SmallInt
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  shipment     Shipment[]
  Store        Store[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Stock {
  id        Int      @id @default(autoincrement())
  inStock   Decimal  @db.Decimal()
  productId Int      @unique @db.SmallInt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id            Int           @id @default(autoincrement())
  name          String        @db.VarChar(255)
  priceUnit     Decimal       @db.Decimal()
  basicUnit     String        @db.VarChar(255)
  taxPercentage Decimal       @db.Decimal()
  active        Boolean       @default(true)
  period        Int           @db.SmallInt
  serviceSale   ServiceSale[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model ServiceSale {
  id           Int       @id @default(autoincrement())
  quantitySold Decimal   @db.Decimal()
  priceUnit    Decimal   @db.Decimal()
  price        Decimal   @db.Decimal()
  taxAmount    Decimal   @db.Decimal()
  renove       Boolean   @default(true)
  period       Int       @db.SmallInt
  startTime    DateTime  @db.Timestamp()
  endTime      DateTime? @db.Timestamp()
  saleId       Int       @db.SmallInt
  sale         Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  serviceId    Int       @db.SmallInt
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  Store        Store[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model OneTimeService {
  id            Int                  @id @default(autoincrement())
  name          String               @db.VarChar(255)
  price         Decimal              @db.Decimal()
  taxPercentage Decimal              @db.Decimal()
  active        Boolean              @default(true)
  serviceSale   OneTimeServiceSale[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
}

model OneTimeServiceSale {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(255)
  price     Decimal        @db.Decimal()
  taxAmount Decimal        @db.Decimal()
  saleId    Int            @db.SmallInt
  sale      Sale           @relation(fields: [saleId], references: [id], onDelete: Cascade)
  serviceId Int            @db.SmallInt
  service   OneTimeService @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  Store     Store[]
}

// Client and Locals
model Country {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(64)
  code      Int      @db.SmallInt
  state     State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  UF        String    @db.Char(2)
  countryId Int       @db.SmallInt
  country   Country   @relation(fields: [countryId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
}

model Client {
  id        Int        @id @default(autoincrement())
  firstName String     @db.VarChar(100)
  lastName  String     @db.VarChar(100)
  email     String     @unique @db.VarChar(168)
  whatsApp  String?    @db.VarChar(21)
  company   String?    @db.VarChar(255)
  VAT_ID    String?    @db.VarChar(60)
  accountId Int        @db.SmallInt
  account   Account    @relation(fields: [accountId], references: [id], onDelete: Cascade)
  address   Address[]
  Shipment  Shipment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Address {
  id        Int        @id @default(autoincrement())
  zipCode   Int        @db.SmallInt
  city      String     @db.VarChar(168)
  zone      String     @db.VarChar(64)
  street    String     @db.VarChar(255)
  number    Int        @db.SmallInt
  district  String     @db.VarChar(100)
  clientId  Int        @db.SmallInt
  client    Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  stateId   Int        @db.SmallInt
  state     State      @relation(fields: [stateId], references: [id], onDelete: Cascade)
  shipment  Shipment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Details from shipments
model Shipment {
  id             Int              @id @default(autoincrement())
  productSaleId  Int              @db.SmallInt
  producSale     ProductSale      @relation(fields: [productSaleId], references: [id], onDelete: Cascade)
  addressId      Int              @db.SmallInt
  address        Address          @relation(fields: [addressId], references: [id], onDelete: Cascade)
  paymentTypeId  Int              @db.SmallInt
  paymentType    PaymentType      @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
  clientId       Int              @db.SmallInt
  client         Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  shipmentTypeId Int              @db.SmallInt
  shipmentType   ShipmentType     @relation(fields: [shipmentTypeId], references: [id], onDelete: Cascade)
  shipmentStatus ShipmentStatus[]
  paymentDetails PaymentDetails[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ShipmentType {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(64)
  shipment  Shipment[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ShipmentStatus {
  id              Int                   @id @default(autoincrement())
  shipmentId      Int                   @db.SmallInt
  shipment        Shipment              @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  time            DateTime              @db.Timestamp()
  notes           String                @db.Text
  statusCatalogId Int                   @db.SmallInt
  statusCatalog   ShipmentStatusCatalog @relation(fields: [statusCatalogId], references: [id], onDelete: Cascade)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

// Status of shipment
model ShipmentStatusCatalog {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  shipmentStatus ShipmentStatus[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model PaymentType {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(64)
  shipment    Shipment[]
  paymentData PaymentData[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model PaymentDetails {
  id            Int         @id @default(autoincrement())
  shipmentId    Int         @db.SmallInt
  shipment      Shipment    @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  paymentDataId Int         @db.SmallInt
  paymentData   PaymentData @relation(fields: [paymentDataId], references: [id], onDelete: Cascade)
  description   String      @db.VarChar(255)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model PaymentData {
  id             Int              @id @default(autoincrement())
  dataName       String           @db.VarChar(255)
  dataType       String           @db.VarChar(255)
  paymentTypeId  Int              @db.SmallInt
  paymentType    PaymentType      @relation(fields: [paymentTypeId], references: [id], onDelete: Cascade)
  paymentDetails PaymentDetails[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum Role {
  USER
  ADMIN
  AUTHOR
  STORE
}
